AWSTemplateFormatVersion: 2010-09-09 
Description: Create Loadbalancer.
Parameters:
  project:
    Type: String
  environment:
    Type: String
    AllowedValues:
      - dev
      - qa
      - prod
  service:
    Type: String
  vpcId:
    Type: String
  lbSubnetsIdList:
    Type: CommaDelimitedList
  loadBalancerPort:
    Type: Number
    Default: 80
  publicLB:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  useHTTPS:
    Type: String
    Default: 'true'
    AllowedValues:
      - 'true'
      - 'false'
  certificateARN:
    Type: String
  hostedZoneId:
    Type: String
  loadbalancerDomainName:
    Type: String
Conditions:
  isPublicELB: !Equals 
    - !Ref publicLB
    - 'true'
  isHTTPS: !Equals 
    - !Ref useHTTPS
    - 'true'
Resources:
  LoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub 'secg-${project}-${environment}-${service}-lb'
      GroupDescription: !Sub 'SG for LB ${project}-${environment}-${service}'
      VpcId: !Ref vpcId
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref loadBalancerPort
          ToPort: !Ref loadBalancerPort
          CidrIp: 0.0.0.0/0
        - !If
          - isHTTPS
          - IpProtocol: tcp
            FromPort: 443
            ToPort: 443
            CidrIp: 0.0.0.0/0
          - !Ref AWS::NoValue
      Tags:
        - Key: Name
          Value: !Sub 'secg-${project}-${environment}-${service}-lb'

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub 'elb-${project}-${environment}-${service}'
      # "internet-facing" or "internal"
      Scheme: !If [isPublicELB, 'internet-facing', 'internal']
      LoadBalancerAttributes:
        # this is the default, but is specified here in case it needs to be changed
        - Key: idle_timeout.timeout_seconds
          Value: 60
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref lbSubnetsIdList
      Tags:
        - Key: Name
          Value: !Sub 'elb-${project}-${environment}-${service}'

  LoadBalancerListenerHTTP:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - LoadBalancer    
    Properties:
      DefaultActions:
        - !If
          - isHTTPS
          - Type: "redirect"
            RedirectConfig:
              Protocol: "HTTPS"
              Port: 443
              Host: "#{host}"
              Path: "/#{path}"
              Query: "#{query}"
              StatusCode: "HTTP_301"
          - Type: fixed-response
            FixedResponseConfig: 
              StatusCode: 400
      LoadBalancerArn: !Ref LoadBalancer
      Port: !Ref loadBalancerPort
      Protocol: HTTP

  LoadBalancerListenerHTTPS:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Condition: isHTTPS
    DependsOn:
      - LoadBalancer    
    Properties:
      Certificates: 
        - CertificateArn: !Ref certificateARN
      DefaultActions:
        - FixedResponseConfig: 
            StatusCode: 400
          Type: fixed-response
      LoadBalancerArn: !Ref LoadBalancer
      Port: 443
      Protocol: HTTPS

  LoadBalancerAlias:
    Type: AWS::Route53::RecordSet
    Properties:
      AliasTarget:
        DNSName: !GetAtt LoadBalancer.DNSName
        HostedZoneId: !GetAtt LoadBalancer.CanonicalHostedZoneID
      HostedZoneId: !Ref hostedZoneId
      Name: !Ref loadbalancerDomainName
      Type: A

Outputs:
  loadBalancerSecurityGroupId:
    Description: LoadBalancer Security Group Id
    Value: !Ref LoadBalancerSecurityGroup
  loadBalancerListenerARN:
    Description: LoadBalancer Listener ARN
    Value: !If [isHTTPS, !Ref LoadBalancerListenerHTTPS, !Ref LoadBalancerListenerHTTP]
  loadBalancerEndpoint:
    Description: Service Endpoint
    Value: !GetAtt LoadBalancer.DNSName